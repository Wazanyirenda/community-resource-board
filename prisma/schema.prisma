// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  location  String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resources Resource[]
  reviews   Review[]   @relation("UserReviews")
  ratings   Rating[]   @relation("UserRatings")

  @@map("users")
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  location    String
  imageUrl    String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews   Review[]
  ratings   Rating[]

  @@map("resources")
}

model Review {
  id         String   @id @default(cuid())
  content    String
  rating     Int      // 1-5 stars
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  userId     String
  user       User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@map("reviews")
}

model Rating {
  id         String   @id @default(cuid())
  value      Int      // 1-5 stars
  createdAt  DateTime @default(now())

  // Relations
  userId     String
  user       User     @relation("UserRatings", fields: [userId], references: [id], onDelete: Cascade)
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@map("ratings")
}
